Axlsx::Package.new do |p|
  p.workbook.add_worksheet(name: ' "#{employee_transactions.first.personnel_employee&.first_name}-#{start_date.strftime('%d-%b')}-to-#{end_date.strftime('%d-%b')}" Records') do |sheet|
    # Add headers
    sheet.add_row ['Employee Id', 'First Name', 'Department_id', 'Date', 'Weekday', 'First Check-in Time', 'Last Check-out Time', 'Break Time']

    # Add data rows
    @iclock_transactions.each do |transaction|
      sheet.add_row [
        transaction.personnel_employee.emp_code,
        transaction.personnel_employee.first_name,
        transaction.personnel_employee.department_id,
        transaction.punch_time.strftime("%d/%m/%Y"),
        transaction.punch_time.strftime("%A"),
        transaction.check_in_time.strftime("%H:%M:%S") if transaction.check_in_time,
        transaction.check_out_time.strftime("%H:%M:%S") if transaction.check_out_time,
        # Calculate Break Time based on your formula
        if transaction.check_in_time && transaction.check_out_time
          check_in_times = transaction.punch_time.to_a.select { |t| t.punch_state == "0" }.map(&:punch_time)
          check_out_times = transaction.punch_time.to_a.select { |t| t.punch_state == "1" }.map(&:punch_time)
          total_office_seconds = (check_out_times.max - check_in_times.min)
          total_break_seconds = 0
          (0..(check_in_times.length - 2)).each do |index|
            total_break_seconds += (check_in_times[index + 1] - check_out_times[index]) if check_out_times[index]
          end
          total_office_seconds -= total_break_seconds
          total_office_hours = (total_office_seconds / 3600).to_i
          total_office_minutes = ((total_office_seconds % 3600) / 60).to_i
          "#{total_office_hours} hours #{total_office_minutes} minutes"
        else
          'N/A'
        end
      ]
    end
  end
